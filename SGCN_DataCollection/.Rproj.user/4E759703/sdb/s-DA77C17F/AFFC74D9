{
    "collab_server" : "",
    "contents" : "#---------------------------------------------------------------------------------------------\n# Name: SGCNcollector_gbof.R\n# Purpose: \n# Author: Christopher Tracey\n# Created: 2017-07-10\n# Updated: \n#\n# Updates:\n# insert date and info\n# * 2016-08-17 - got the code to remove NULL values from the keys to work; \n#                added the complete list of SGCN to load from a text file;\n#                figured out how to remove records where no occurences we found;\n#                make a shapefile of the results  \n#\n# To Do List/Future Ideas:\n# * check projection\n# * wkt integration\n# * filter the occ_search results on potential data flags -- looks like its pulling \n#   the coordinates from iNat that are obscured.  \n# * might be a good idea to create seperate reports with obscured records\n#-------\n\nsetwd(\"C:/Users/ctracey/Dropbox (PNHP @ WPC)/coa/COA/SGCN_DataCollection\")\n\nlibrary('rgbif')\nlibrary('plyr')\nlibrary('data.table')\nlibrary('rgdal')  # for vector work; sp package should always load with rgdal. \nlibrary('raster')   # for metadata/attributes- vectors or rasters\n\n\naoi_wkt <- 'POLYGON ((-80.577111647999971 42.018959019000079, -80.583025511999949 39.690462536000041, -77.681987232999973 39.68735201800007, -75.761816590999956 39.690666106000037, -75.678308913999956 39.790810226000076, -75.53064649099997 39.815101786000071, -75.411566911999955 39.776679135000052, -75.101245089999964 39.880029385000057, -75.09383042199994 39.944216030000064, -74.690932882999959 40.133570156000076, -74.690425973999936 40.17528313400004, -74.893196517999968 40.350896889000069, -74.914505704999954 40.415842984000051, -75.012247039999977 40.448477402000037, -75.004556583999943 40.522413349000033, -75.134560399999941 40.623471625000036, -75.136516799999981 40.723392383000032, -75.002409694999983 40.867515299000047, -75.082051382999964 40.971575944000051, -74.830463730999952 41.152763058000062, -74.768212647999974 41.271891205000031, -74.640518995999969 41.358839422000074, -74.709416559999966 41.454495330000043, -74.826329023999961 41.475865789000068, -74.936988959999951 41.521739840000066, -75.018029425999941 41.617276498000081, -75.012709979999954 41.733926517000043, -75.061642930999938 41.85481505100006, -75.218658916999971 41.904656042000056, -75.336705265999967 42.017618624000079, -77.511689405999959 42.017704281000078, -79.721693517999938 42.024739989000068, -79.715980736999938 42.353623043000027, -80.577111647999971 42.018959019000079))' # simplified boundard of Pennsylvania.\n\n\n# read in the SGCn lookup\nlu_sgcn <- read.csv(\"lu_sgcn.csv\")\n# add a field for ELSEASON\nlu_sgcn$ELSEASON <- paste(lu_sgcn$ELCODE,lu_sgcn$SeasonCode,sep=\"-\")\n\n# subset to the species group one wants to query\nsgcn_query <- lu_sgcn[which(lu_sgcn$TaxaGroup==\"ARAA\"),]\n# generate a species list to query gbif\nsplist <- factor(sgcn_query$SNAME)\n\n# gets the  keys for each species name, based on GBIF\nkeys <- sapply(splist, function(x) name_backbone(name=x)$speciesKey, USE.NAMES=FALSE)\n\n# gets rid of any null values generated by name_backbone in the case of unmatchable species names\nkeys1=keys[-(which(sapply(keys,is.null),arr.ind=TRUE))] #note: seems to break if there is only one item in the list... use for multiple species!\n###cat(length(keys)-length(keys1),\"of\",length(keys), \"species were not found in GBIF\", \"\\n\")  ### This line needs fixing!!!!\nkeys <- keys1\n\n#searches for occurrences\ndat <- occ_search(\n  taxonKey=keys, \n  limit=10, # modify if needed, fewer will make testing go faster\n  return='data', \n  hasCoordinate=TRUE,\n  geometry=aoi_wkt, \n  ##datasetKey!='4fa7b334-ce0d-4e88-aaae-2e0c138d049e' this doesnt work\n  year='1990,2016',\n  fields=c('name','scientificName','datasetKey','recordedBy','key','decimalLatitude','decimalLongitude','country','basisOfRecord','coordinateAccuracy','year','month','day')\n)\n\ndat <-  dat[dat!=\"no data found, try a different search\"] # deletes the items from the list where no occurences were found. doesn't work for one species\ndatdf <- ldply(dat) # turns the list to a data frame\n\n#generetates list of GBIF names and keys for joining up the proper SWAP sames names\nmyvars <- c(\".id\",\"name\")\ngbif_spKey <-  unique(datdf[myvars])\nsetnames(gbif_spKey, \".id\", \"keys\")\nsgcn_spKey <- data.frame(splist,keys)\n\ngbif_spKey <-  join(gbif_spKey,sgcn_spKey,by=c('keys'))\n\n\n#\ngbifdata <- datdf # just changing the name so it backs up\n\n#this will eventually pull up the dataset name so we can put it int tohe notes\n#datasetkeys <- unique(datdf$datasetKey)\n#datasetnames <- datasets(uuid=\"c4a2c617-91a7-4d4f-90dd-a78b899f8545\")\n\ngbifdata$Notes <- paste(\"gbifid=\",datdf$key,\"; Basis of Record=\",datdf$basisOfRecord,sep=\"\")\ngbifdata$DataSource <- \"GBIF\"\nsetnames(gbifdata, \"name\", \"SNAME\")\nsetnames(gbifdata, \"key\", \"DataID\")\nsetnames(gbifdata, \"decimalLongitude\", \"Longitude\")\nsetnames(gbifdata, \"decimalLatitude\", \"Latitude\")\n\n# build the last observed field\ngbifdata$LASTOBS <- paste(gbifdata$year,sprintf(\"%02d\",gbifdata$month),sprintf(\"%02d\",gbifdata$day),sep=\"-\")\n# delete the colums we don't need from the gbif dataset\nkeeps <- c(\"SNAME\",\"DataID\",\"Longitude\",\"Latitude\",\"LASTOBS\",\"Notes\")\ngbifdata <- gbifdata[keeps]\n\n# delete the columns from the lu_sgcn layer and \nkeeps <- c(\"SNAME\",\"SCOMNAME\",\"ELCODE\",\"TaxaGroup\",\"Environment\")\nsgcn_query <- sgcn_query[keeps]\n\n\ngbifdata <-  join(gbifdata,sgcn_query,by=c('SNAME'))\n\n\n# create a shapefile\n# based on http://neondataskills.org/R/csv-to-shapefile-R/\n# note that the easting and northing columns are in columns 5 and 6\nSGCNgbif <- SpatialPointsDataFrame(gbifdata[,5:6],gbifdata,,proj4string <- CRS(\"+init=epsg:4326\"))   # assign a CRS, proj4string = utm18nCR  #https://www.nceas.ucsb.edu/~frazier/RSpatialGuides/OverviewCoordinateReferenceSystems.pdf; the two commas in a row are important due to the slots feature\nplot(SGCNgbif,main=\"Map of SGCN Locations\")\n# write a shapefile\nwriteOGR(SGCNgbif, getwd(),\"SGCN_FromGBIF\", driver=\"ESRI Shapefile\")\n\n\n\n\n# \n#keeps <- c(\"Taxonomic_Group\",\"ELCODE\",\"Common_Name\",\"Scientific_Name\")\n#inverts_info <- inverts[keeps]\n\n\n\n",
    "created" : 1499715826735.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "353767708",
    "id" : "AFFC74D9",
    "lastKnownWriteTime" : 1499721422,
    "last_content_update" : 1499721422233,
    "path" : "C:/Users/ctracey/Dropbox (PNHP @ WPC)/coa/COA/SGCN_DataCollection/SGCNcollector_gbif.R",
    "project_path" : "SGCNcollector_gbif.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}